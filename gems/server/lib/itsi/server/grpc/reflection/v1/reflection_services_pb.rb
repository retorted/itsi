# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: reflection.proto for package 'grpc.reflection.v1'
# Original file comments:
# Copyright 2016 The gRPC Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Service exported by server reflection.  A more complete description of how
# server reflection works can be found at
# https://github.com/grpc/grpc/blob/master/doc/server-reflection.md
#
# The canonical version of this proto can be found at
# https://github.com/grpc/grpc-proto/blob/master/grpc/reflection/v1/reflection.proto
#

require "grpc"
require_relative "reflection_pb"

module Grpc
  module Reflection
    module V1
      module ServerReflection
        class Service
          include ::GRPC::GenericService

          self.marshal_class_method = :encode
          self.unmarshal_class_method = :decode
          self.service_name = "grpc.reflection.v1.ServerReflection"

          # The reflection service is structured as a bidirectional stream, ensuring
          # all related requests go to a single server.
          rpc :ServerReflectionInfo, stream(::Grpc::Reflection::V1::ServerReflectionRequest),
              stream(::Grpc::Reflection::V1::ServerReflectionResponse)

          def initialize(handlers)
            @handlers = handlers
            super()
          end

          def server_reflection_info(req, _unused_call)
            req.each do |request|
              res = Grpc::Reflection::V1::ServerReflectionResponse.new

              if !request.list_services.empty?
                res.list_services_response = Grpc::Reflection::V1::ListServiceResponse.new(service: list_services_response)
              elsif !request.file_containing_symbol.empty?
                res.file_descriptor_response = Grpc::Reflection::V1::FileDescriptorResponse.new(
                  file_descriptor_proto: [
                    Google::Protobuf::FileDescriptorProto.encode(Google::Protobuf::DescriptorPool.generated_pool.lookup(request.file_containing_symbol).file_descriptor.to_proto)
                  ]
                )
              elsif !request.file_by_filename.empty?
                # Handle file_by_filename requests
                file_descriptor = find_file_descriptor_by_filename(request.file_by_filename)
                if file_descriptor
                  res.file_descriptor_response = Grpc::Reflection::V1::FileDescriptorResponse.new(
                    file_descriptor_proto: [Google::Protobuf::FileDescriptorProto.encode(file_descriptor)]
                  )
                else
                  res.error_response = Grpc::Reflection::V1::ErrorResponse.new(
                    error_code: 5, # NOT_FOUND
                    error_message: "File not found: #{request.file_by_filename}"
                  )
                end
              end
              yield res
              # We can loop here if running in Fiber mode, but for best compatibility with blocking IO modes
              # we'll close the connection and force the client to reconnect force
              # subsequent reflection requests
              break
            end
          end

          def find_file_descriptor_by_filename(filename)
            # First try direct lookup in the pool

            descriptor = Google::Protobuf::DescriptorPool.generated_pool.lookup(filename)&.file_descriptor
            return descriptor.to_proto if descriptor

            proto_name = convert_file_path_to_proto_name(filename)
            descriptor = Google::Protobuf::DescriptorPool.generated_pool.lookup(proto_name)&.file_descriptor
            return descriptor.to_proto if descriptor

            nil
          end

          def convert_file_path_to_proto_name(file_path)
            # Remove .proto extension
            file_path = file_path.sub(/\.proto$/, "")

            # Split path into parts
            parts = file_path.split("/")

            # Convert last part to PascalCase (e.g., money -> Money)
            parts[-1] = parts[-1].split("_").map(&:capitalize).join

            # Join with dots
            parts.join(".")
          end

          def list_services_response
            @list_services_response ||= @handlers.map(&:class).map(&:service_name).map do |name|
              Grpc::Reflection::V1::ServiceResponse.new(name: name)
            end
          end
        end

        Stub = Service.rpc_stub_class
      end
    end
  end
end
