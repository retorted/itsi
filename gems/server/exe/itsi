#!/usr/bin/env ruby
# frozen_string_literal: true

require "itsi/server"
require "optparse"


COMMANDS = {
  "init" => "Initialize a new Itsi.rb server configuration file",
  "status" => "Show the status of the server",
  "start" => "Start the Itsi server",
  "serve" => "Start the Itsi server",
  "stop" => "Stop the server",
  "reload" => "Reload the server",
  "restart" => "Restart the server",
  "test" => "Test config file validity",
  "add_worker" => "Add a new worker to the server cluster",
  "remove_worker" => "Remove a worker from the server cluster",
  "routes" => "Print the routes of the server",
  "passfile" => "Manage hashed users and passwords in a passfile (like .htpasswd). [add, echo, remove, list]",
  "secret" => "Generate a new secret for use in a JWT verifier",
  "test_route" => "Test which route a request will be routed to",
  "static" => "Serve static assets in the given directory"
}

Itsi::Server::Config.prep_reexec!

options = {}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: itsi [COMMAND] [options]"

  opts.on("-C", "--config CONFIG_FILE", String, "Itsi Configuration file to use (default: Itsi.rb)") do |config_file|
    options[:config_file] = config_file
  end

  opts.on("-w", "--workers WORKERS", Integer, "Number of workers") do |w|
    options[:workers] = w
  end

  opts.on("-d", "--daemonize", "Run the process as a daemon") do
    options[:daemonize] = true
  end

  opts.on("-t", "--threads THREADS", Integer, "Number of threads (default: 1)") do |t|
    options[:threads] = t
  end

  opts.on("--[no-]multithreaded-reactor", "Use a multithreaded reactor") do |mtr|
    options[:multithreaded_reactor] = mtr
  end

  opts.on("-r", "--rackup_file FILE", String, "Rackup file to use (default: config.ru)") do |rf|
    options[:rackup_file] = rf
  end

  opts.on("--worker-memory-limit MEMORY_LIMIT", Integer,
          "Memory limit for each worker (default: None). If this limit is breached the worker is gracefully restarted") do |ml|
    options[:worker_memory_limit] = ml
  end

  opts.on("-f", "--fiber_scheduler [CLASS_NAME]", String,
          "Scheduler class to use (default: nil). Provide blank or true to use Itsi::Scheduler, or a classname to use an alternative scheduler") do |scheduler_class|
    if scheduler_class.nil? || scheduler_class == "true"
      options[:scheduler_class] = "Itsi::Scheduler"
    elsif scheduler_class == "false"
      options.delete(:scheduler_class)
    else
      options[:scheduler_class] = scheduler_class
    end
  end

  opts.on("--preload [true, false, :bundle_group_name]", String, " Toggle preloading the application") do |preload|
    if preload == "true"
      options[:preload] = true
    elsif preload == "false"
      options[:preload] = false
    else
      # Not supported yet
    end
  end

  opts.on("-b", "--bind BIND", String,
          "Bind address (default: http://0.0.0.0:3000). You can specify this flag multiple times to bind to multiple addresses.") do |bind|
    options[:binds] ||= []
    options[:binds] << bind
  end

  opts.on("-c", "--cert_path CERT_PATH", String,
          "Path to the SSL certificate file (must follow a --bind option). You can specify this flag multiple times.") do |cp|
    raise OptionParser::InvalidOption, "--cert_path must follow a --bind" if options[:binds].empty?

    require "uri"

    # Modify the last bind entry to add/update the cert query parameter
    uri = URI.parse("http://#{options[:binds].last}") # Ensure valid URI parsing
    params = URI.decode_www_form(uri.query.to_s).to_h
    params["cert"] = cp
    query_string = params.map { |k, v| "#{k}=#{v}" }.join("&")
    options[:binds][-1] = "#{uri.host}?#{query_string}"
  end

  opts.on("-k", "--key_path KEY_PATH", String,
          "Path to the SSL key file (must follow a --bind option). You can specify this flag multiple times.") do |kp|
    raise OptionParser::InvalidOption, "--key_path must follow a --bind" if options[:binds].empty?

    require "uri"

    # Modify the last bind entry to add/update the key query parameter
    uri = URI.parse("http://#{options[:binds].last}") # Ensure valid URI parsing
    params = URI.decode_www_form(uri.query.to_s).to_h
    params["key"] = kp
    query_string = params.map { |k, v| "#{k}=#{v}" }.join("&")
    options[:binds][-1] = "#{uri.host}?#{query_string}"
  end

  opts.on("--shutdown_timeout SHUTDOWN_TIMEOUT", String,
          "Graceful timeout period before forcing workers to shutdown") do |shutdown_timeout|
    options[:shutdown_timeout] = shutdown_timeout
  end


  opts.on("--stream-body", TrueClass, "Stream body frames (default: false for best compatibility)") do |stream_body|
    options[:stream_body] = stream_body
  end

  opts.on("-h", "--help", "Show this help message") do
    puts opts
    puts "COMMAND: "
    COMMANDS.each do |command, description|
      puts "    #{command} - #{description}"
    end
    exit
  end

  opts.on("--reexec PARAMS", String, "Reexec the server with the given parameters") do |params|
    options[:reexec] = params
  end

  opts.on("--listeners LISTENERS", String, "Listeners for reexec") do |listeners|
    options[:listeners] = listeners
  end

  opts.on("--passfile PASSFILE", String, "Passfile") do |passfile|
    options[:passfile] = passfile
  end

  opts.on("--algorithm ALGORITHM", String, "Algorithm for password hashing") do |algorithm|
    options[:algorithm] = algorithm
  end

  opts.on("-dDIR", "--dir=DIR", "(For use with secret) Save keys/secret to DIR instead of printing") do |d|
    options[:save_dir] = d
  end

  opts.on("-v", "--version", "Show version") do
    puts "Itsi version #{Itsi::Server::VERSION}"
    exit(0)
  end
end

if ENV['COMP_LINE'] || ARGV.include?('--completion')
  puts COMMANDS.keys
  exit
end

parser.parse!

case (command = ARGV.shift)
when *COMMANDS.keys
  required_arity = Itsi::Server.method(command).parameters&.select{|c| c.first == :req }&.length&.succ || 2
  case required_arity
  when 1 then Itsi::Server.send(command)
  when 2 then Itsi::Server.send(command, options)
  else
    if ARGV.length != required_arity - 2
      puts "Command #{command} requires #{required_arity - 2} subcommands. "
      exit(0)
    end
    Itsi::Server.send(command, options, *ARGV)
  end
when nil
  Itsi::Server.start(options)
else
  puts "Invalid command #{command}.\n"
  puts "COMMAND: "
  COMMANDS.each do |command, description|
    puts "    #{command} - #{description}"
  end
end
