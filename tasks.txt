Polish and Release (At Lake):
-- Interrupted gRPC stream can cause server hanging. Need better errors in JSON mode
-- What can we do about:  export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
-- Confirm headers has full set of add/remove/*append*
-- Print routes
-- Match route tester
-- Static server command
-- Offer password hash generation, and load from files for basic auth, api key, jwt.
-- Max body size. Look for other safety timeouts.
-- Revamp error system (look at Anyhow):
  Better internal errors (Break things on purpose. Make clear when specific middleware fails)

-- Feature breakdown. For each feature make sure we have
--- Ultra robust config.
--- Documentation
--- Tests.
--- Debug Logging
--- Parameters for everything
--- No unwrap

-- Faster/sleeker default app

-- Script name comes from location in hierarchy instead of params, not a param.

-- Fast:
  - Request convenience functions (body JSON, body form-encoded, file uploads)
  - Response convenience functions respond_json, respond_html, respond_file

-- Add notes on: PGGSSENCMODE="disable" and OBJC_DISABLE_INITIALIZE_FORK_SAFETY=
-- Better default Itsi-file

-- Did you mean functionality inside config file parsing
-- Support nil extension for static file serving
-- Disable . for static file serving (by default)

- Feature List:
-- HTTP
-- HTTP2
-- TLS
-- Websockets
-- Hijack
-- Callable
-- Streaming Bodies
-- Rate Limiter
-- Auth JWT/Basic/API
-- gRPC
-- File Watcher
-- Allow/Deny
-- Cache control
-- compression
-- CORS
-- etag
-- Intrusion Protection
-- Proxy
-- Header changes (also support append, replace, remove)
-- Endpoint
-- Rackup
-- Rack inline
-- Static assets
-- Redirect
-- Logging
-- Cluster
-- Single
-- Restart
-- Stream body
-- Thread high/low
-- Unix Sockets
-- Uneven request distribution (Retry central acceptor, core affinity)
-- Mini apps, one-file sites.

Later:
- OTel
- Optimize Hash creation for Rack
- Image resizer
- First class Rackless Websockets
- Implement Simple Request timeout (non-fiber mode. Kill stuck threads. Default to nil)
- Print out warning if we can detect a location block will never be hit.
- Optimize: Avoid double encoding in compression filter if already compressed
- Built in dashboard + Stats
- Support Request timeout in Fiber scheduler mode
- Support UDP
- Support unix socket proxy
-- Hunt down sporradic bad file desc during tests
-- WASM pluggable middleware
-- proto proxy
