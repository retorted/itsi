Feature complete! Polish and Release (At Lake):
-- Feature breakdown. Per feature make sure we have
--- Clean Code
--- Debug logging
--- Ultra robust config, with sane and safe defaults.
--- Complete Documentation (Readme + Blog)
--- Nice middleware printing
--- Tests.
--- Targetable Debug Logging
--- Good default config value

- Go on unwrap hunt


Fill in Changelog.md date
Retest in live environment
- Add examples
*maybe* leave service running on live server to verify let's encrypt renewals.

- Feature List:
-- HTTP
-- HTTP2
-- TLS
-- Websockets
-- Headers (Replace is equal to remove plus append)
-- Hijack
-- Callable
-- Streaming Bodies
-- Rate Limiter
-- Auth JWT/Basic/API
-- gRPC Server (Plug in existing Ruby gRPC handlers)
-- File Watcher and auto-reloading
-- Allow/Deny lists
-- Cache control
-- compression
-- CORS
-- CSP Reporting
-- etag
-- Intrusion Protection
-- Proxy
-- Header changes (also support append, replace, remove)
-- Endpoint
-- Rackup
-- Rack inline
-- Static assets
-- Redirect (HTTP to HTTPS!)
-- Logging
-- Cluster
-- Single
-- Graceful and Hot Restart
-- Streaming body
-- Unix Sockets
-- Support for running high-performance mini-apps, written and served directly from the singular Itsi.rb configuration file.
-- Well documented complete with LSP support.
-- Author Final default Itsi-file
-- Add notes on: PGGSSENCMODE="disable" and OBJC_DISABLE_INITIALIZE_FORK_SAFETY=

Later:
- OTel
- Even faster Hash creation for Rack
- Image resizer
- First class Rackless Websockets
- Print out warning if we can detect that a location block will never be hit.
- Built in obs Dashboard + Stats
- Support UDP
- Support unix socket proxy
- WASM pluggable middleware
- gRPC proxying

-- Stretch goals:
  - HTTP-01 Autocert
  - H3
  - OpenAPI gen
  - Finish Single acceptor mode (Optional)
    - Introduce Option
    - Finish Unix implementation
    - Kill a single worker (impact)
    - Clean shutdown and restart while in single acceptor mode
    - Fix Hang
    - Introduce Socket Options
